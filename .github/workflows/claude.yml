name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || \
       contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Prevent runaway processes
    permissions:
      contents: read       # Minimum required for repository access
      pull-requests: write # Only if PR updates needed
      issues: write       # Only if issue updates needed
      id-token: write     # For OIDC authentication
      actions: read       # Required for Claude to read CI results on PRs
    steps:
      - name: Security validation
        shell: bash
        run: |
          echo "🔒 Performing workflow security validation..."
          
          # Validate that we're not in a fork for security reasons
          if [ "${{ github.event.pull_request.head.repo.fork }}" = "true" ]; then
            echo "⚠️ Warning: Running in a forked repository - Claude access may be limited"
          fi
          
          # Validate actor permissions for sensitive operations
          if [ "${{ github.actor }}" != "${{ github.repository_owner }}" ]; then
            echo "ℹ️ External contributor detected: ${{ github.actor }}"
            echo "Enhanced security measures will be applied"
          fi
          
          echo "✅ Security validation completed"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          # Ensure we don't checkout potentially malicious content
          persist-credentials: false

      - name: Validate Claude Code OAuth token
        shell: bash
        run: |
          if [ -z "${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}" ]; then
            echo "❌ Error: CLAUDE_CODE_OAUTH_TOKEN secret is not configured"
            echo "Please add your Claude Code OAuth token to repository secrets"
            exit 1
          fi
          
          # Basic token format validation (without exposing the token)
          TOKEN="${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}"
          if [ ${#TOKEN} -lt 10 ]; then
            echo "❌ Error: Claude Code OAuth token appears to be invalid (too short)"
            exit 1
          fi
          
          echo "✅ Claude Code OAuth token validation passed"

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        timeout-minutes: 25  # Leave buffer for cleanup
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read
          
          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"
          
          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"
          
          # Optional: Trigger when specific user is assigned to an issue
          # assignee_trigger: "claude-bot"
          
          # Restricted tool access for security
          allowed_tools: "Bash(make build),Bash(make test),Bash(make lint),Bash(go mod tidy),Bash(go fmt ./...),Bash(go vet ./...),Bash(git status),Bash(git diff),Bash(git log --oneline -n 10)"
          
          # Additional security restrictions
          max_iterations: 10
          
          # Prevent access to sensitive operations
          denied_patterns: |
            rm -rf
            sudo
            curl -X POST
            wget -O
            chmod 777
            > /etc/
            >> /etc/
            export ANTHROPIC_API_KEY
            export CLAUDE_CODE_OAUTH_TOKEN
          
          # Security-focused custom instructions for Syncwright project
          custom_instructions: |
            CRITICAL SECURITY REQUIREMENTS:
            - NEVER commit or expose Claude Code OAuth tokens in any form
            - ALWAYS validate file paths and prevent directory traversal attacks
            - ALWAYS use secure patterns for environment variable handling
            - NEVER hardcode API keys, tokens, or sensitive credentials
            - ALWAYS implement proper input validation and sanitization
            - Follow Go security best practices and conventional commits
            - Ensure all GitHub Actions workflows follow security guidelines
            - Validate binary integrity when downloading or installing tools
            - Use minimum required permissions for GitHub Actions
            - Implement proper error handling without information disclosure
            
            PROJECT CONTEXT:
            - This is the Syncwright AI-powered Git conflict resolution tool
            - Focus on CLI tool development, GitHub Actions security, and AI integration
            - Follow the coding standards and conventions outlined in CLAUDE.md
            - Use specialized agents in .claude/agents/ for specific expertise areas
            
          # Restricted environment for security
          claude_env: |
            NODE_ENV: production
            SYNCWRIGHT_SECURITY_MODE: strict

