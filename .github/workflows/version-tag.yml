---
name: Version Tag Management

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Type of version bump'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
          - custom
      custom_version:
        description: 'Custom version (when version_type is custom, e.g., 1.2.3)'
        required: false
        type: string
      prerelease_type:
        description: 'Prerelease type (when version_type is prerelease)'
        required: false
        default: 'beta'
        type: choice
        options:
          - alpha
          - beta
          - rc
      commit_message:
        description: 'Custom commit message for version bump'
        required: false
        type: string
      create_release:
        description: 'Create GitHub release after tagging'
        required: false
        default: true
        type: boolean

env:
  GO_VERSION: '1.22'

permissions:
  contents: write
  packages: read

jobs:
  validate-inputs:
    name: Validate Inputs
    runs-on: ubuntu-latest
    outputs:
      new-version: ${{ steps.calculate-version.outputs.new-version }}
      current-version: ${{ steps.get-current.outputs.current-version }}
      version-tag: ${{ steps.calculate-version.outputs.version-tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get current version
        id: get-current
        run: |
          # Get the latest tag from git
          CURRENT_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          CURRENT_VERSION=${CURRENT_TAG#v}

          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Calculate new version
        id: calculate-version
        run: |
          CURRENT_VERSION="${{ steps.get-current.outputs.current-version }}"
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
          CUSTOM_VERSION="${{ github.event.inputs.custom_version }}"
          PRERELEASE_TYPE="${{ github.event.inputs.prerelease_type }}"

          echo "Calculating new version from: $CURRENT_VERSION"
          echo "Version type: $VERSION_TYPE"

          # Parse current version
          IFS='.' read -r -a VERSION_PARTS <<< "${CURRENT_VERSION%%-*}"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}

          # Check for existing prerelease
          PRERELEASE=""
          if [[ "$CURRENT_VERSION" =~ - ]]; then
            PRERELEASE="${CURRENT_VERSION#*-}"
          fi

          case "$VERSION_TYPE" in
            "major")
              NEW_MAJOR=$((MAJOR + 1))
              NEW_MINOR=0
              NEW_PATCH=0
              NEW_VERSION="$NEW_MAJOR.$NEW_MINOR.$NEW_PATCH"
              ;;
            "minor")
              NEW_MAJOR=$MAJOR
              NEW_MINOR=$((MINOR + 1))
              NEW_PATCH=0
              NEW_VERSION="$NEW_MAJOR.$NEW_MINOR.$NEW_PATCH"
              ;;
            "patch")
              NEW_MAJOR=$MAJOR
              NEW_MINOR=$MINOR
              NEW_PATCH=$((PATCH + 1))
              NEW_VERSION="$NEW_MAJOR.$NEW_MINOR.$NEW_PATCH"
              ;;
            "prerelease")
              NEW_MAJOR=$MAJOR
              NEW_MINOR=$MINOR
              NEW_PATCH=$PATCH

              # Calculate prerelease number
              if [[ -n "$PRERELEASE" && \
                    "$PRERELEASE" =~ ^${PRERELEASE_TYPE}\.([0-9]+)$ ]]; then
                PRERELEASE_NUM=$((${BASH_REMATCH[1]} + 1))
              else
                PRERELEASE_NUM=1
              fi

              NEW_VERSION="$NEW_MAJOR.$NEW_MINOR.$NEW_PATCH-${PRERELEASE_TYPE}.${PRERELEASE_NUM}"
              ;;
            "custom")
              if [ -z "$CUSTOM_VERSION" ]; then
                echo "Error: Custom version is required when version_type is custom"
                exit 1
              fi

              # Validate custom version format
              if [[ ! "$CUSTOM_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
                echo "Error: Invalid custom version format. Expected: X.Y.Z or X.Y.Z-prerelease"
                exit 1
              fi

              NEW_VERSION="$CUSTOM_VERSION"
              ;;
            *)
              echo "Error: Invalid version type: $VERSION_TYPE"
              exit 1
              ;;
          esac

          VERSION_TAG="v$NEW_VERSION"

          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version-tag=$VERSION_TAG" >> $GITHUB_OUTPUT

          echo "New version: $NEW_VERSION"
          echo "New tag: $VERSION_TAG"

      - name: Validate new version
        run: |
          NEW_VERSION="${{ steps.calculate-version.outputs.new-version }}"
          CURRENT_VERSION="${{ steps.get-current.outputs.current-version }}"
          VERSION_TAG="${{ steps.calculate-version.outputs.version-tag }}"

          # Check if tag already exists
          if git rev-parse "$VERSION_TAG" >/dev/null 2>&1; then
            echo "Error: Tag $VERSION_TAG already exists"
            exit 1
          fi

          # For stable releases, ensure we're not going backwards
          if [[ ! "$NEW_VERSION" =~ - ]]; then
            # Simple version comparison (works for most cases)
            if [ "$(printf '%s\n' "$CURRENT_VERSION" "$NEW_VERSION" | sort -V | head -n1)" = \
                 "$NEW_VERSION" ] && [ "$CURRENT_VERSION" != "$NEW_VERSION" ]; then
              echo "Error: New version $NEW_VERSION is not greater than current \
                version $CURRENT_VERSION"
              exit 1
            fi
          fi

          echo "Version validation passed"

  create-version-tag:
    name: Create Version Tag
    runs-on: ubuntu-latest
    needs: validate-inputs
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Update version files (if any)
        run: |
          NEW_VERSION="${{ needs.validate-inputs.outputs.new-version }}"

          # Update version in go files if there's a version file
          if [ -f "internal/version/version.go" ]; then
            echo "Updating version in Go files..."
            sed -i "s/const Version = \".*\"/const Version = \"$NEW_VERSION\"/" internal/version/version.go
            git add internal/version/version.go
          fi

          # Update version in action.yml comments if present
          if grep -q "# Version:" action.yml; then
            sed -i "s/# Version: .*/# Version: $NEW_VERSION/" action.yml
            git add action.yml
          fi

          # Check if there are any changes to commit
          if ! git diff --cached --quiet; then
            COMMIT_MESSAGE="${{ github.event.inputs.commit_message }}"
            if [ -z "$COMMIT_MESSAGE" ]; then
              COMMIT_MESSAGE="Bump version to $NEW_VERSION"
            fi

            git commit -m "$COMMIT_MESSAGE"
            echo "Version files updated and committed"
          else
            echo "No version files to update"
          fi

      - name: Create and push tag
        run: |
          VERSION_TAG="${{ needs.validate-inputs.outputs.version-tag }}"
          NEW_VERSION="${{ needs.validate-inputs.outputs.new-version }}"

          # Create annotated tag
          git tag -a "$VERSION_TAG" -m "Release $VERSION_TAG"

          # Push changes and tag
          git push origin HEAD
          git push origin "$VERSION_TAG"

          echo "Created and pushed tag: $VERSION_TAG"

      - name: Generate tag summary
        run: |
          VERSION_TAG="${{ needs.validate-inputs.outputs.version-tag }}"
          NEW_VERSION="${{ needs.validate-inputs.outputs.new-version }}"
          CURRENT_VERSION="${{ needs.validate-inputs.outputs.current-version }}"
          VERSION_TYPE="${{ github.event.inputs.version_type }}"

          echo "## üè∑Ô∏è Version Tag Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Previous Version** | \`v$CURRENT_VERSION\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **New Version** | \`$VERSION_TAG\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Version Type** | \`$VERSION_TYPE\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Tag Created** | ‚úÖ |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check if it's a prerelease
          if [[ "$NEW_VERSION" =~ - ]]; then
            echo "üß™ **This is a prerelease version**" >> $GITHUB_STEP_SUMMARY
          else
            echo "üöÄ **This is a stable release**" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ github.event.inputs.create_release }}" = "true" ]; then
            echo "1. ‚è≥ GitHub release will be created automatically" >> $GITHUB_STEP_SUMMARY
            echo "2. ‚è≥ Marketplace publishing will be triggered" >> $GITHUB_STEP_SUMMARY
          else
            echo "1. üìù Create GitHub release manually if desired" >> $GITHUB_STEP_SUMMARY
            echo "2. üîß Monitor workflows at: " >> $GITHUB_STEP_SUMMARY
            echo "https://github.com/${{ github.repository }}/actions" >> $GITHUB_STEP_SUMMARY
          fi

          echo "3. üîç Monitor release workflow: " >> $GITHUB_STEP_SUMMARY
          echo "https://github.com/${{ github.repository }}/actions/workflows/release.yml" >> \
            $GITHUB_STEP_SUMMARY
          echo "4. üè™ Monitor marketplace publishing: " >> $GITHUB_STEP_SUMMARY
          echo "https://github.com/${{ github.repository }}/actions/workflows/publish-marketplace.yml" >> \
            $GITHUB_STEP_SUMMARY

  trigger-release:
    name: Trigger Release Creation
    runs-on: ubuntu-latest
    needs: [validate-inputs, create-version-tag]
    if: github.event.inputs.create_release == 'true'
    steps:
      - name: Trigger release workflow
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.validate-inputs.outputs.version-tag }}';
            const isPrerelease = version.includes('-');

            console.log(`Triggering release workflow for ${version}`);
            console.log(`Is prerelease: ${isPrerelease}`);

            try {
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'release.yml',
                ref: 'main',
                inputs: {
                  version: version,
                  draft: 'false',
                  prerelease: isPrerelease.toString()
                }
              });

              console.log('Release workflow triggered successfully');
            } catch (error) {
              console.error('Failed to trigger release workflow:', error);
              // Don't fail the workflow since the tag is already created
              // The release workflow should trigger automatically on the tag
              console.log('Release workflow will trigger automatically on tag creation');
            }

      - name: Release trigger summary
        run: |
          echo "## üöÄ Release Triggered" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The release workflow has been triggered for version " >> $GITHUB_STEP_SUMMARY
          echo "\`${{ needs.validate-inputs.outputs.version-tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Monitor Progress:**" >> $GITHUB_STEP_SUMMARY
          echo "- [Release Workflow]" >> $GITHUB_STEP_SUMMARY
          echo "(https://github.com/${{ github.repository }}/actions/workflows/release.yml)" >> \
            $GITHUB_STEP_SUMMARY
          echo "- [Marketplace Publishing]" >> $GITHUB_STEP_SUMMARY
          echo "(https://github.com/${{ github.repository }}/actions/workflows/publish-marketplace.yml)" >> \
            $GITHUB_STEP_SUMMARY

  notify-completion:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: [validate-inputs, create-version-tag, trigger-release]
    if: always()
    steps:
      - name: Success notification
        if: needs.create-version-tag.result == 'success'
        run: |
          VERSION_TAG="${{ needs.validate-inputs.outputs.version-tag }}"

          echo "‚úÖ Version tag $VERSION_TAG created successfully!"
          echo "üîó Tag: https://github.com/${{ github.repository }}/releases/tag/$VERSION_TAG"

          if [ "${{ github.event.inputs.create_release }}" = "true" ]; then
            echo "üöÄ Release creation triggered"
          fi

      - name: Failure notification
        if: needs.create-version-tag.result == 'failure'
        run: |
          echo "‚ùå Failed to create version tag"
          echo "Please check the workflow logs for details"
          exit 1
