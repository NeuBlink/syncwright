name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string
      draft:
        description: 'Create as draft release'
        required: false
        type: boolean
        default: false
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
            # Consider anything with alpha, beta, rc, or dev as prerelease
            if [[ "$VERSION" =~ (alpha|beta|rc|dev) ]]; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
          fi
          
          # Validate version format
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9-]+)?(\+[a-zA-Z0-9-]+)?$ ]]; then
            echo "Error: Invalid version format: $VERSION"
            echo "Expected format: vX.Y.Z[-prerelease][+build]"
            exit 1
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          
          echo "Release version: $VERSION"
          echo "Is prerelease: $IS_PRERELEASE"

      - name: Validate Go module version
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          # Check if version exists in git tags
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "Tag $VERSION already exists"
            if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
              echo "Error: Cannot release existing tag via manual dispatch"
              exit 1
            fi
          fi

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: |
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.out
            coverage.html

  validate-action:
    name: Validate GitHub Action
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate action.yml syntax
        run: |
          # Basic YAML syntax validation
          python3 -c "import yaml; yaml.safe_load(open('action.yml'))"
          
          # Check required fields
          if ! grep -q "^name:" action.yml; then
            echo "Error: action.yml missing 'name' field"
            exit 1
          fi
          
          if ! grep -q "^description:" action.yml; then
            echo "Error: action.yml missing 'description' field"
            exit 1
          fi
          
          if ! grep -q "^runs:" action.yml; then
            echo "Error: action.yml missing 'runs' field"
            exit 1
          fi

      - name: Validate composite action structure
        run: |
          # Check that all referenced scripts exist
          if grep -q "scripts/install.sh" action.yml; then
            if [ ! -f "scripts/install.sh" ]; then
              echo "Error: Referenced script scripts/install.sh not found"
              exit 1
            fi
            if [ ! -x "scripts/install.sh" ]; then
              echo "Error: scripts/install.sh is not executable"
              exit 1
            fi
          fi

      - name: Test action execution (dry run)
        run: |
          # Simulate action environment
          export GITHUB_WORKSPACE="${{ github.workspace }}"
          export GITHUB_ACTION_PATH="${{ github.workspace }}"
          
          # Test the install script
          cd "$GITHUB_WORKSPACE"
          ./scripts/install.sh || echo "Install script test completed (expected to fail without releases)"

  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: [validate-release, test, validate-action]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Set up GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          install-only: true

      - name: Download dependencies
        run: go mod download

      - name: Run GoReleaser (build only)
        run: |
          goreleaser build --snapshot --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [validate-release, build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Set up GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          install-only: true

      - name: Download dependencies
        run: go mod download

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Generate changelog from git history
          CHANGELOG_FILE=$(mktemp)
          
          # Get previous tag for comparison
          PREV_TAG=$(git tag --sort=-version:refname | grep -v "$VERSION" | head -n1)
          
          if [ -n "$PREV_TAG" ]; then
            echo "## What's Changed" > "$CHANGELOG_FILE"
            echo "" >> "$CHANGELOG_FILE"
            
            # Get commits between tags
            git log --pretty=format:"- %s (%h)" "$PREV_TAG".."$VERSION" >> "$CHANGELOG_FILE"
            
            echo "" >> "$CHANGELOG_FILE"
            echo "" >> "$CHANGELOG_FILE"
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREV_TAG...$VERSION" >> "$CHANGELOG_FILE"
          else
            echo "## Initial Release" > "$CHANGELOG_FILE"
            echo "" >> "$CHANGELOG_FILE"
            echo "This is the first release of Syncwright." >> "$CHANGELOG_FILE"
          fi
          
          # Set output for use in release
          {
            echo "changelog<<EOF"
            cat "$CHANGELOG_FILE"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update release with changelog
        uses: actions/github-script@v7
        with:
          script: |
            const { data: release } = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: '${{ needs.validate-release.outputs.version }}'
            });
            
            const changelog = `${{ steps.changelog.outputs.changelog }}`;
            
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              body: changelog,
              draft: ${{ github.event.inputs.draft || 'false' }},
              prerelease: ${{ needs.validate-release.outputs.is_prerelease }}
            });

  trigger-marketplace-publish:
    name: Trigger Marketplace Publishing
    runs-on: ubuntu-latest
    needs: [validate-release, release]
    if: ${{ !github.event.inputs.draft && needs.validate-release.outputs.is_prerelease == 'false' }}
    steps:
      - name: Trigger marketplace publishing workflow
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.validate-release.outputs.version }}';
            
            console.log(`Triggering marketplace publishing for version ${version}`);
            
            // The dedicated marketplace publishing workflow will handle:
            // - Comprehensive validation
            // - Major version tag updates  
            // - Release note generation
            // - Marketplace submission
            
            // Note: The publish-marketplace.yml workflow is automatically triggered
            // by the tag creation in the release job above
            
            console.log(`Marketplace publishing will be handled by dedicated workflow`);
            console.log(`Monitor progress at: https://github.com/${{ github.repository }}/actions/workflows/publish-marketplace.yml`);

  test-action-consumption:
    name: Test Action Consumption
    runs-on: ubuntu-latest
    needs: [validate-release, trigger-marketplace-publish]
    if: always() && needs.validate-release.result == 'success'
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout test repository
        uses: actions/checkout@v4

      - name: Create test Git repository
        run: |
          git config --global user.name "Test User"
          git config --global user.email "test@example.com"
          
          # Create a simple test repository with potential conflicts
          mkdir test-repo
          cd test-repo
          git init
          
          echo "line1" > test.txt
          echo "line2" >> test.txt
          git add test.txt
          git commit -m "Initial commit"
          
          # Create branches that will conflict
          git checkout -b feature-branch
          echo "modified line2 in feature" > test.txt
          git add test.txt
          git commit -m "Feature change"
          
          git checkout main
          echo "line1" > test.txt
          echo "modified line2 in main" >> test.txt
          git add test.txt
          git commit -m "Main change"

      - name: Test Syncwright Action
        uses: ./
        with:
          run_validation: 'true'
          max_tokens: '5000'
          merge_failed: 'false'
        continue-on-error: true

      - name: Verify action execution
        run: |
          echo "Action test completed"
          # Check that the action at least attempted to run
          if [ -f "./syncwright" ]; then
            echo "✅ Syncwright binary was installed"
            ./syncwright --version || echo "Version check completed"
          else
            echo "❌ Syncwright binary not found"
            exit 1
          fi

  notify-completion:
    name: Notify Release Completion
    runs-on: ubuntu-latest
    needs: [validate-release, release, trigger-marketplace-publish, test-action-consumption]
    if: always()
    steps:
      - name: Generate release summary
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          IS_PRERELEASE="${{ needs.validate-release.outputs.is_prerelease }}"
          
          echo "## 🚀 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: $([ "$IS_PRERELEASE" = "true" ] && echo "Pre-release" || echo "Stable release")" >> $GITHUB_STEP_SUMMARY
          echo "- **Release**: ${{ needs.release.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Marketplace Trigger**: ${{ needs.trigger-marketplace-publish.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Testing**: ${{ needs.test-action-consumption.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.release.result }}" = "success" ]; then
            echo "✅ **Release created successfully**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📦 **Assets available at**: https://github.com/${{ github.repository }}/releases/tag/$VERSION" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ needs.trigger-marketplace-publish.result }}" = "success" ]; then
              echo "🏪 **Marketplace publishing triggered**" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "🔍 **Monitor marketplace publishing**: https://github.com/${{ github.repository }}/actions/workflows/publish-marketplace.yml" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "🔧 **Usage**: " >> $GITHUB_STEP_SUMMARY
              echo '```yaml' >> $GITHUB_STEP_SUMMARY
              echo "- uses: ${{ github.repository }}@$VERSION" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ **Release failed**" >> $GITHUB_STEP_SUMMARY
          fi