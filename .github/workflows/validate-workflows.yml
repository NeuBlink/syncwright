---
name: Validate Workflows

on:
  push:
    paths:
      - '.github/workflows/**'
      - 'action.yml'
      - 'scripts/**'
  pull_request:
    paths:
      - '.github/workflows/**'
      - 'action.yml'
      - 'scripts/**'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  validate-yaml:
    name: Validate YAML Syntax
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install yamllint
        run: |
          sudo apt-get update
          sudo apt-get install -y yamllint

      - name: Validate workflow YAML files
        run: |
          echo "Validating GitHub Actions workflow files..."

          # Create a simple yamllint config that focuses on syntax errors only
          cat > .yamllint.yml << 'EOF'
          extends: default
          rules:
            line-length: disable
            comments: disable
            comments-indentation: disable
            truthy: disable
            trailing-spaces: disable
            new-line-at-end-of-file: disable
            document-start: disable
            empty-lines: disable
            brackets: disable
            braces: disable
            indentation: disable
          EOF

          # Validate all YAML files
          find .github/workflows -name "*.yml" -o -name "*.yaml" | while read -r workflow; do
            echo "Validating $workflow"
            if yamllint -c .yamllint.yml "$workflow"; then
              echo "✅ $workflow syntax is valid"
            else
              echo "❌ $workflow has syntax errors"
              exit 1
            fi
          done

      - name: Validate action.yml syntax
        run: |
          echo "Validating action.yml..."
          if yamllint -c .yamllint.yml action.yml; then
            echo "✅ action.yml syntax is valid"
          else
            echo "❌ action.yml has syntax errors"
            exit 1
          fi

  validate-action-structure:
    name: Validate Action Structure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install yq for YAML parsing
        run: |
          sudo wget -qO /usr/local/bin/yq \
            https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Validate action.yml structure
        run: |
          echo "Validating action.yml structure..."

          # Check required top-level fields
          echo "Checking for 'name' field..."
          if yq eval 'has("name")' action.yml | grep -q "true"; then
            echo "✅ Found required field: name"
          else
            echo "❌ Missing required field: name"
            exit 1
          fi

          echo "Checking for 'description' field..."
          if yq eval 'has("description")' action.yml | grep -q "true"; then
            echo "✅ Found required field: description"
          else
            echo "❌ Missing required field: description"
            exit 1
          fi

          echo "Checking for 'runs' field..."
          if yq eval 'has("runs")' action.yml | grep -q "true"; then
            echo "✅ Found required field: runs"
          else
            echo "❌ Missing required field: runs"
            exit 1
          fi

          # Check branding for marketplace
          echo "Checking for 'branding' field..."
          if yq eval 'has("branding")' action.yml | grep -q "true"; then
            if yq eval '.branding | has("icon")' action.yml | grep -q "true" && \
               yq eval '.branding | has("color")' action.yml | grep -q "true"; then
              echo "✅ Branding section complete"
            else
              echo "❌ Branding section incomplete (missing icon or color)"
              exit 1
            fi
          else
            echo "⚠️  No branding section found"
          fi

      - name: Check file references
        run: |
          echo "Checking file references in action.yml..."

          # Check that referenced scripts exist
          if grep -q "scripts/install.sh" action.yml; then
            if [ ! -f "scripts/install.sh" ]; then
              echo "❌ Referenced script scripts/install.sh not found"
              exit 1
            fi
            if [ ! -x "scripts/install.sh" ]; then
              echo "❌ scripts/install.sh is not executable"
              exit 1
            fi
            echo "✅ scripts/install.sh exists and is executable"
          fi

      - name: Validate inputs and outputs
        run: |
          echo "Validating action inputs and outputs..."

          # Check if inputs section exists and has valid structure
          if yq eval 'has("inputs")' action.yml | grep -q "true"; then
            echo "✅ Found inputs section"
            # Basic validation that inputs exist - detailed validation would be complex in shell
            input_count=$(yq eval '.inputs | length' action.yml)
            echo "ℹ️  Found $input_count input(s)"
          else
            echo "ℹ️  No inputs section found"
          fi

          # Check if outputs section exists and has valid structure
          if yq eval 'has("outputs")' action.yml | grep -q "true"; then
            echo "✅ Found outputs section"
            # Basic validation that outputs exist - detailed validation would be complex in shell
            output_count=$(yq eval '.outputs | length' action.yml)
            echo "ℹ️  Found $output_count output(s)"
          else
            echo "ℹ️  No outputs section found"
          fi

      - name: Validate composite action steps
        run: |
          echo "Validating composite action steps..."

          # Check that all steps have proper shell specification
          if ! grep -q "shell: bash" action.yml; then
            echo "❌ Missing shell specification in composite action"
            exit 1
          fi

          # Count the number of shell specifications vs steps
          shell_count=$(grep -c "shell: bash" action.yml)
          step_count=$(yq eval '.runs.steps | length' action.yml)

          if [ "$shell_count" -eq "$step_count" ]; then
            echo "✅ All $step_count steps have proper shell specification"
          else
            echo "⚠️  Warning: Found $shell_count shell specifications for $step_count steps"
          fi

  validate-workflow-security:
    name: Validate Workflow Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check workflow permissions
        run: |
          echo "Checking workflow permissions..."

          for workflow in .github/workflows/*.yml; do
            echo "Checking permissions in $workflow"

            if grep -q "permissions:" "$workflow"; then
              # Check for overly broad permissions
              if grep -A 10 "permissions:" "$workflow" | grep -q "write-all"; then
                echo "⚠️  Warning: $workflow uses write-all permissions"
              fi

              # Check for contents: write usage
              if grep -A 10 "permissions:" "$workflow" | grep -q "contents: write"; then
                if grep -q "release\|tag\|commit\|push" "$workflow"; then
                  echo "✅ $workflow has contents: write with valid use case"
                else
                  echo "⚠️  Warning: $workflow has contents: write but may not need it"
                fi
              fi

              echo "✅ Permissions in $workflow reviewed"
            else
              echo "ℹ️  No explicit permissions in $workflow (using defaults)"
            fi
          done

      - name: Check secrets usage
        run: |
          echo "Checking secrets usage in workflows..."

          # Find all secret references
          if grep -r "secrets\." .github/workflows/ > /tmp/secret_refs.txt; then
            echo "Found secret references:"
            while read -r line; do
              echo "  $line"

              # Check for common security patterns
              if echo "$line" | grep -q "secrets\.GITHUB_TOKEN"; then
                echo "    ✅ Using built-in GITHUB_TOKEN"
              elif echo "$line" | grep -q "secrets\..*_TOKEN"; then
                echo "    ⚠️  Using external token - ensure it's necessary"
              fi
            done < /tmp/secret_refs.txt
          else
            echo "No secret references found"
          fi

      - name: Security scan
        run: |
          echo "Scanning workflows for security issues..."

          # Check for potential script injection vulnerabilities
          if grep -r "github.event" .github/workflows/ | \
             grep -v "github.event.inputs" > /tmp/event_usage.txt; then
            if [ -s /tmp/event_usage.txt ]; then
              echo "⚠️  Warning: Direct use of github.event data detected"
              echo "    Consider validating or sanitizing user inputs"
              cat /tmp/event_usage.txt
            fi
          fi

          # Check for hardcoded secrets
          if grep -ri "password\|token\|key" .github/workflows/ | \
             grep -v "secrets\." > /tmp/hardcoded.txt; then
            if [ -s /tmp/hardcoded.txt ]; then
              echo "⚠️  Warning: Potential hardcoded secrets detected"
              cat /tmp/hardcoded.txt
            fi
          fi

          # Check for HTTP downloads
          if grep -r "http://" .github/workflows/ > /tmp/http_usage.txt; then
            if [ -s /tmp/http_usage.txt ]; then
              echo "⚠️  Warning: HTTP downloads detected (should use HTTPS)"
              cat /tmp/http_usage.txt
            fi
          fi

          echo "✅ Security scan completed"

  validate-marketplace:
    name: Validate Marketplace Readiness
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install yq for YAML parsing
        run: |
          sudo wget -qO /usr/local/bin/yq \
            https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Check required files
        run: |
          echo "Checking GitHub Marketplace requirements..."

          required_files="README.md LICENSE action.yml"

          for file in $required_files; do
            if [ ! -f "$file" ]; then
              echo "❌ Missing required file: $file"
              exit 1
            else
              echo "✅ Found required file: $file"
            fi
          done

      - name: Validate marketplace metadata
        run: |
          echo "Validating action metadata for marketplace..."

          # Check marketplace-specific requirements individually
          echo "Checking 'name' field..."
          if yq eval 'has("name")' action.yml | grep -q "true"; then
            echo "✅ Found name"
          else
            echo "❌ Missing name"
            exit 1
          fi

          echo "Checking 'description' field..."
          if yq eval 'has("description")' action.yml | grep -q "true"; then
            echo "✅ Found description"
          else
            echo "❌ Missing description"
            exit 1
          fi

          echo "Checking 'author' field..."
          if yq eval 'has("author")' action.yml | grep -q "true"; then
            echo "✅ Found author"
          else
            echo "❌ Missing author"
            exit 1
          fi

          echo "Checking 'branding' field..."
          if yq eval 'has("branding")' action.yml | grep -q "true"; then
            echo "✅ Found branding"
          else
            echo "❌ Missing branding"
            exit 1
          fi

          # Validate branding details
          if yq eval '.branding | has("icon")' action.yml | grep -q "true" && \
             yq eval '.branding | has("color")' action.yml | grep -q "true"; then
            icon=$(yq eval '.branding.icon' action.yml)
            color=$(yq eval '.branding.color' action.yml)
            echo "✅ Branding: icon=$icon, color=$color"
          else
            echo "❌ Incomplete branding information"
            exit 1
          fi

      - name: Check README content
        run: |
          echo "Checking README for action usage examples..."

          if grep -q "uses:.*syncwright" README.md; then
            echo "✅ README includes action usage examples"
          else
            echo "⚠️  Warning: README should include action usage examples"
          fi

          # Check for basic sections
          sections="usage example inputs outputs"
          for section in $sections; do
            if grep -qi "$section" README.md; then
              echo "✅ README has $section section"
            else
              echo "ℹ️  Consider adding $section section to README"
            fi
          done

  test-action-syntax:
    name: Test Action Syntax
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test action in dry-run mode
        uses: ./
        with:
          run_validation: 'false'
          merge_failed: 'false'
        continue-on-error: true
        id: test-action

      - name: Validate action execution
        run: |
          if [ "${{ steps.test-action.outcome }}" = "success" ]; then
            echo "✅ Action syntax and basic execution is valid"
          else
            echo "❌ Action failed during test execution"
            echo "This might indicate syntax errors or missing dependencies"
            exit 1
          fi

  summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs: [validate-yaml, validate-action-structure, validate-workflow-security,
            validate-marketplace, test-action-syntax]
    if: always()
    steps:
      - name: Generate validation summary
        run: |
          echo "## 🔍 Workflow Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| YAML Syntax | ${{ needs.validate-yaml.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Action Structure | ${{ needs.validate-action-structure.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Workflow Security | ${{ needs.validate-workflow-security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Marketplace Readiness | ${{ needs.validate-marketplace.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Action Syntax Test | ${{ needs.test-action-syntax.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Calculate overall status
          failed_jobs=""
          if [ "${{ needs.validate-yaml.result }}" != "success" ]; then
            failed_jobs="$failed_jobs YAML-Syntax"
          fi
          if [ "${{ needs.validate-action-structure.result }}" != "success" ]; then
            failed_jobs="$failed_jobs Action-Structure"
          fi
          if [ "${{ needs.validate-workflow-security.result }}" != "success" ]; then
            failed_jobs="$failed_jobs Workflow-Security"
          fi
          if [ "${{ needs.validate-marketplace.result }}" != "success" ]; then
            failed_jobs="$failed_jobs Marketplace"
          fi
          if [ "${{ needs.test-action-syntax.result }}" != "success" ]; then
            failed_jobs="$failed_jobs Action-Test"
          fi

          if [ -z "$failed_jobs" ]; then
            echo "✅ **All validations passed** - Workflows are ready for production" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Key Improvements Made" >> $GITHUB_STEP_SUMMARY
            echo "- Replaced Python dependencies with lightweight shell tools" >> \
              $GITHUB_STEP_SUMMARY
            echo "- Used \`yamllint\` and \`yq\` for YAML validation and parsing" >> \
              $GITHUB_STEP_SUMMARY
            echo "- Maintained comprehensive security and structure validation" >> \
              $GITHUB_STEP_SUMMARY
            echo "- Added practical action syntax testing" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Some validations failed** - Failed jobs:$failed_jobs" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please review the job details above and fix the issues." >> $GITHUB_STEP_SUMMARY
          fi
