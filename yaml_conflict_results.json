{
  "success": true,
  "conflict_report": {
    "conflicted_files": [
      {
        "path": "action.yml",
        "hunks": [
          {
            "start_line": 29,
            "end_line": 41,
            "ours_lines": [
              "  # Main branch: Add retry mechanism support  ",
              "  retry_count:",
              "    description: 'Number of retry attempts for failed conflict resolutions'",
              "    required: false",
              "    default: '3'"
            ],
            "theirs_lines": [
              "  # Feature branch: Add debug mode support",
              "  debug_mode:",
              "    description: 'Enable detailed debug logging for troubleshooting conflict resolution'",
              "    required: false",
              "    default: 'false'"
            ]
          }
        ],
        "context": [
          "---",
          "name: 'Syncwright'",
          "description: \u003e-",
          "  AI-powered Git merge conflict resolution tool that automatically detects,",
          "  analyzes, and resolves merge conflicts using advanced language models",
          "author: 'Syncwright Team'",
          "",
          "# GitHub Marketplace metadata",
          "branding:",
          "  icon: 'git-merge'",
          "  color: 'blue'",
          "",
          "# Marketplace optimization:",
          "# - Name: Clear, descriptive action name",
          "# - Description: Comprehensive description highlighting AI capabilities and CI/CD integration",
          "# - Author: Consistent team branding",
          "# - Branding: Professional git-merge icon with blue color for trust and reliability",
          "# - Tags (conceptual): git, merge-conflicts, ai, automation, cli, conflict-resolution, ci-cd, github-actions",
          "",
          "inputs:",
          "  run_validation:",
          "    description: 'Enable comprehensive validation checks before and after conflict resolution'",
          "    required: false",
          "    default: 'true'",
          "  max_tokens:",
          "    description: 'Maximum tokens for AI processing (-1 for unlimited, recommended for complex conflicts)'",
          "    required: false",
          "    default: '-1'",
          "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD",
          "  # Main branch: Add retry mechanism support  ",
          "  retry_count:",
          "    description: 'Number of retry attempts for failed conflict resolutions'",
          "    required: false",
          "    default: '3'",
          "=======",
          "  # Feature branch: Add debug mode support",
          "  debug_mode:",
          "    description: 'Enable detailed debug logging for troubleshooting conflict resolution'",
          "    required: false",
          "    default: 'false'",
          "\u003e\u003e\u003e\u003e\u003e\u003e\u003e test-yaml-conflict",
          "  claude_code_oauth_token:",
          "    description: 'Claude Code OAuth token for AI-powered conflict resolution (store as repository secret)'",
          "    required: false",
          "  merge_failed:",
          "    description: 'Set to true when automatic Git merge fails to trigger AI-powered resolution'",
          "    required: false",
          "    default: 'false'",
          "  pr_number:",
          "    description: 'Pull request number for context-aware resolution and status reporting'",
          "    required: false",
          "  base_branch:",
          "    description: 'Target branch name (e.g., main, develop) for merge operation context'",
          "    required: false",
          "  head_branch:",
          "    description: 'Source branch name containing changes to be merged'",
          "    required: false",
          "",
          "outputs:",
          "  conflicts_resolved:",
          "    description: 'Boolean indicating whether merge conflicts were successfully resolved by AI'",
          "    value: ${{ steps.run-syncwright.outputs.conflicts_resolved }}",
          "  files_modified:",
          "    description: 'Number of files that were modified during the conflict resolution process'",
          "    value: ${{ steps.run-syncwright.outputs.files_modified }}",
          "",
          "runs:",
          "  using: 'composite'",
          "  steps:",
          "    - name: Setup environment",
          "      shell: bash",
          "      run: |",
          "        echo \"Setting up Syncwright environment...\"",
          "        echo \"SYNCWRIGHT_VERSION=${SYNCWRIGHT_VERSION:-latest}\" \u003e\u003e $GITHUB_ENV",
          "        echo \"SYNCWRIGHT_DEBUG=${SYNCWRIGHT_DEBUG:-false}\" \u003e\u003e $GITHUB_ENV",
          "",
          "    - name: Install Syncwright binary",
          "      shell: bash",
          "      run: |",
          "        echo \"Installing Syncwright binary...\"",
          "",
          "        # Validate and sanitize action path to prevent code injection",
          "        ACTION_PATH=\"${{ github.action_path }}\"",
          "        WORKSPACE_PATH=\"${{ github.workspace }}\"",
          "",
          "        # Basic path validation - ensure paths don't contain dangerous characters",
          "        if [[ \"$ACTION_PATH\" =~ [\\;\\\u0026\\|\\`\\$\\(\\)] ]] || [[ \"$WORKSPACE_PATH\" =~ [\\;\\\u0026\\|\\`\\$\\(\\)] ]]; then",
          "          echo \"Error: Action or workspace path contains potentially dangerous characters\"",
          "          exit 1",
          "        fi",
          "",
          "        # Ensure paths are absolute and don't contain directory traversal",
          "        if [[ \"$ACTION_PATH\" != /* ]] || [[ \"$WORKSPACE_PATH\" != /* ]]; then",
          "          echo \"Error: Action or workspace path is not absolute\"",
          "          exit 1",
          "        fi",
          "",
          "        if [[ \"$ACTION_PATH\" =~ \\.\\. ]] || [[ \"$WORKSPACE_PATH\" =~ \\.\\. ]]; then",
          "          echo \"Error: Action or workspace path contains directory traversal\"",
          "          exit 1",
          "        fi",
          "",
          "        # Set binary name based on platform for all subsequent steps",
          "        if [ \"$RUNNER_OS\" = \"Windows\" ] || [ \"$(go env GOOS)\" = \"windows\" ]; then",
          "          BINARY_PATH=\"${ACTION_PATH}/bin/syncwright.exe\"",
          "          TARGET_BINARY=\"./syncwright.exe\"",
          "          SYNCWRIGHT_BINARY=\"./syncwright.exe\"",
          "        else",
          "          BINARY_PATH=\"${ACTION_PATH}/bin/syncwright\"",
          "          TARGET_BINARY=\"./syncwright\"",
          "          SYNCWRIGHT_BINARY=\"./syncwright\"",
          "        fi",
          "",
          "        # Priority 1: Use pre-built binary from action path (fastest)",
          "        if [ -f \"$BINARY_PATH\" ]; then",
          "          echo \"Using pre-built binary from action path\"",
          "          cp \"$BINARY_PATH\" \"$TARGET_BINARY\"",
          "          chmod +x \"$TARGET_BINARY\"",
          "        # Priority 2: Build directly from source if available (CI optimization)",
          "        elif [ -f \"${ACTION_PATH}/go.mod\" ] \u0026\u0026 [ -f \"${ACTION_PATH}/cmd/syncwright/main.go\" ]; then",
          "          echo \"Building directly from source in action path (CI optimization)...\"",
          "          cd \"${ACTION_PATH}\"",
          "",
          "          # Use make build for consistent build process",
          "          if make build 2\u003e/dev/null \u0026\u0026 [ -f \"${ACTION_PATH}/bin/syncwright\" ]; then",
          "            echo \"Built using Makefile\"",
          "            cp \"${ACTION_PATH}/bin/syncwright\" \"${WORKSPACE_PATH}/${TARGET_BINARY}\"",
          "            cd \"${WORKSPACE_PATH}\"",
          "            chmod +x \"$TARGET_BINARY\"",
          "          # Fallback to direct go build",
          "          elif go build -o \"${WORKSPACE_PATH}/${TARGET_BINARY}\" ./cmd/syncwright 2\u003e/dev/null; then",
          "            cd \"${WORKSPACE_PATH}\"",
          "            echo \"Built using direct go build\"",
          "            chmod +x \"$TARGET_BINARY\"",
          "          else",
          "            cd \"${WORKSPACE_PATH}\"",
          "            echo \"Source build failed, trying installation script...\"",
          "",
          "            # Priority 3: Use installation script (slower, but handles releases)",
          "            INSTALL_SCRIPT=\"${ACTION_PATH}/scripts/install.sh\"",
          "            export GITHUB_WORKSPACE=\"${WORKSPACE_PATH}\"",
          "            export GITHUB_ACTION_PATH=\"${ACTION_PATH}\"",
          "",
          "            if [ -f \"$INSTALL_SCRIPT\" ] \u0026\u0026 \\",
          "               (timeout 15s \"$INSTALL_SCRIPT\" 2\u003e/dev/null || \\",
          "                (command -v gtimeout \u003e/dev/null 2\u003e\u00261 \u0026\u0026 \\",
          "                 gtimeout 15s \"$INSTALL_SCRIPT\" 2\u003e/dev/null)); then",
          "              echo \"Installation script succeeded\"",
          "            else",
          "              echo \"Installation script failed or timed out, creating functional stub...\"",
          "",
          "              # Priority 4: Create functional stub for testing (fastest fallback)",
          "              cat \u003e \"$TARGET_BINARY\" \u003c\u003c 'STUB_EOF'",
          "              #!/bin/bash",
          "              case \"$1\" in",
          "                --version) echo \"syncwright version 0.0.0-ci-stub\" ;;",
          "                --help) echo \"Usage: syncwright [command] [options]\" ;;",
          "                validate)",
          "                  echo \"Validation completed (CI stub mode)\"",
          "                  [ \"$2\" = \"--verbose\" ] \u0026\u0026 echo \"Verbose validation output\"",
          "                  exit 0 ;;",
          "                detect)",
          "                  echo \"Detection completed (CI stub mode)\"",
          "                  [ \"$2\" = \"--format\" ] \u0026\u0026 [ \"$3\" = \"json\" ] \u0026\u0026 echo '{\"conflicts\": []}'",
          "                  exit 0 ;;",
          "                format)",
          "                  echo \"Format completed (CI stub mode)\"",
          "                  [ \"$2\" = \"--dry-run\" ] \u0026\u0026 echo \"Dry run format output\"",
          "                  exit 0 ;;",
          "                resolve)",
          "                  echo \"Resolve completed (CI stub mode)\"",
          "                  [ \"$2\" = \"--ai\" ] \u0026\u0026 echo \"AI resolution completed\"",
          "                  exit 0 ;;",
          "                *)",
          "                  echo \"Command $1 completed (CI stub mode)\"",
          "                  exit 0 ;;",
          "              esac",
          "              STUB_EOF",
          "              chmod +x \"$TARGET_BINARY\"",
          "              echo \"Warning: Using CI stub for testing. Full functionality not available.\"",
          "            fi",
          "          fi",
          "        else",
          "          echo \"No source files found, trying installation script...\"",
          "",
          "          # Priority 3: Use installation script for release binaries",
          "          INSTALL_SCRIPT=\"${ACTION_PATH}/scripts/install.sh\"",
          "          export GITHUB_WORKSPACE=\"${WORKSPACE_PATH}\"",
          "          export GITHUB_ACTION_PATH=\"${ACTION_PATH}\"",
          "",
          "          if [ -f \"$INSTALL_SCRIPT\" ] \u0026\u0026 \\",
          "             (timeout 15s \"$INSTALL_SCRIPT\" 2\u003e/dev/null || \\",
          "              (command -v gtimeout \u003e/dev/null 2\u003e\u00261 \u0026\u0026 \\",
          "               gtimeout 15s \"$INSTALL_SCRIPT\" 2\u003e/dev/null)); then",
          "            echo \"Installation script succeeded\"",
          "          else",
          "            echo \"Installation script failed, creating basic stub...\"",
          "",
          "            # Final fallback: minimal stub",
          "            echo '#!/bin/bash' \u003e \"$TARGET_BINARY\"",
          "            echo 'echo \"Syncwright CI stub - command $1 completed\"' \u003e\u003e \"$TARGET_BINARY\"",
          "            echo 'exit 0' \u003e\u003e \"$TARGET_BINARY\"",
          "            chmod +x \"$TARGET_BINARY\"",
          "            echo \"Warning: Using minimal stub. Limited functionality.\"",
          "          fi",
          "        fi",
          "",
          "        # Add to PATH for subsequent steps",
          "        echo \"$WORKSPACE_PATH\" \u003e\u003e $GITHUB_PATH",
          "        echo \"SYNCWRIGHT_BINARY=$SYNCWRIGHT_BINARY\" \u003e\u003e $GITHUB_ENV",
          "",
          "        # Verify installation",
          "        if ! \"$SYNCWRIGHT_BINARY\" --version 2\u003e/dev/null; then",
          "          echo \"Warning: Version check failed, but binary exists\"",
          "          ls -la \"$TARGET_BINARY\"",
          "        fi",
          "",
          "    - name: Run Syncwright validation",
          "      if: inputs.run_validation == 'true'",
          "      shell: bash",
          "      run: |",
          "        echo \"Running Syncwright validation...\"",
          "        \"$SYNCWRIGHT_BINARY\" validate --verbose",
          "",
          "    - name: Run Syncwright merge conflict resolution",
          "      id: run-syncwright",
          "      shell: bash",
          "      env:",
          "        CLAUDE_CODE_OAUTH_TOKEN: ${{ inputs.claude_code_oauth_token }}",
          "        SYNCWRIGHT_MAX_TOKENS: ${{ inputs.max_tokens }}",
          "        SYNCWRIGHT_PR_NUMBER: ${{ inputs.pr_number }}",
          "        SYNCWRIGHT_BASE_BRANCH: ${{ inputs.base_branch }}",
          "        SYNCWRIGHT_HEAD_BRANCH: ${{ inputs.head_branch }}",
          "      run: |",
          "        set -e",
          "",
          "        # Initialize output variables",
          "        echo \"conflicts_resolved=false\" \u003e\u003e $GITHUB_OUTPUT",
          "        echo \"files_modified=0\" \u003e\u003e $GITHUB_OUTPUT",
          "",
          "        # Debug: Show current working directory and files",
          "        echo \"Current working directory: $(pwd)\"",
          "        echo \"Available files:\"",
          "        ls -la",
          "        echo \"Syncwright binary location:\"",
          "        which syncwright || echo \"syncwright not in PATH\"",
          "        ls -la \"$SYNCWRIGHT_BINARY\" 2\u003e/dev/null || echo \"No $SYNCWRIGHT_BINARY file\"",
          "",
          "        # Check if we need to run AI-powered resolution",
          "        if [ \"${{ inputs.merge_failed }}\" = \"true\" ]; then",
          "          echo \"Merge conflicts detected, running AI-powered resolution...\"",
          "",
          "          # Ensure we have the required token for AI operations",
          "          if [ -z \"$CLAUDE_CODE_OAUTH_TOKEN\" ]; then",
          "            echo \"Warning: Claude Code OAuth token not provided. Skipping AI-powered resolution.\"",
          "            echo \"Please provide claude_code_oauth_token secret for AI-powered conflict resolution.\"",
          "            exit 0",
          "          fi",
          "",
          "          # Run AI-powered conflict resolution",
          "          echo \"Running: $SYNCWRIGHT_BINARY resolve --ai --max-tokens=$SYNCWRIGHT_MAX_TOKENS\"",
          "",
          "          if \"$SYNCWRIGHT_BINARY\" resolve --ai --max-tokens=\"$SYNCWRIGHT_MAX_TOKENS\" --verbose; then",
          "            echo \"conflicts_resolved=true\" \u003e\u003e $GITHUB_OUTPUT",
          "",
          "            # Count modified files",
          "            MODIFIED_FILES=$(git diff --name-only | wc -l)",
          "            echo \"files_modified=$MODIFIED_FILES\" \u003e\u003e $GITHUB_OUTPUT",
          "",
          "            echo \"AI-powered conflict resolution completed successfully\"",
          "            echo \"Modified $MODIFIED_FILES files\"",
          "          else",
          "            echo \"AI-powered conflict resolution failed\"",
          "            exit 1",
          "          fi",
          "        else",
          "          echo \"No merge conflicts detected or merge was successful\"",
          "          echo \"Running standard Syncwright operations...\"",
          "",
          "          # Run standard operations (validation, formatting, etc.)",
          "          \"$SYNCWRIGHT_BINARY\" format --dry-run",
          "",
          "          if [ \"${{ inputs.run_validation }}\" = \"true\" ]; then",
          "            \"$SYNCWRIGHT_BINARY\" validate --verbose",
          "          fi",
          "",
          "          echo \"Standard Syncwright operations completed\"",
          "        fi",
          "",
          "    - name: Commit resolved conflicts",
          "      if: steps.run-syncwright.outputs.conflicts_resolved == 'true'",
          "      shell: bash",
          "      run: |",
          "        # Check if there are changes to commit",
          "        if ! git diff --quiet; then",
          "          echo \"Committing resolved conflicts...\"",
          "",
          "          # Stage all modified files",
          "          git add .",
          "",
          "          # Create commit message",
          "          COMMIT_MSG=$(cat \u003c\u003c'EOF'",
          "          Resolve merge conflicts using Syncwright AI",
          "",
          "          Automatically resolved conflicts in ${{ steps.run-syncwright.outputs.files_modified }} files using",
          "          AI-powered analysis for context-aware resolution. Validated resolution using Syncwright validation suite.",
          "",
          "          Co-authored-by: syncwright-bot \u003csyncwright-bot@users.noreply.github.com\u003e",
          "          EOF",
          "          )",
          "",
          "          # Commit changes",
          "          git commit -m \"$COMMIT_MSG\"",
          "",
          "          # Push changes back to the head branch",
          "          if [ -n \"$SYNCWRIGHT_HEAD_BRANCH\" ]; then",
          "            git push origin HEAD:\"$SYNCWRIGHT_HEAD_BRANCH\"",
          "            echo \"Pushed resolved conflicts to $SYNCWRIGHT_HEAD_BRANCH\"",
          "          else",
          "            echo \"Warning: Head branch not specified, changes committed locally only\"",
          "          fi",
          "        else",
          "          echo \"No changes to commit after conflict resolution\"",
          "        fi",
          "",
          "    - name: Post-resolution validation",
          "      if: steps.run-syncwright.outputs.conflicts_resolved == 'true'",
          "      shell: bash",
          "      run: |",
          "        echo \"Running post-resolution validation...\"",
          "",
          "        # Verify the repository is in a clean state",
          "        if ! git diff --quiet; then",
          "          echo \"Warning: Repository has uncommitted changes after resolution\"",
          "        fi",
          "",
          "        # Run comprehensive validation",
          "        \"$SYNCWRIGHT_BINARY\" validate --verbose",
          "",
          "        # Check that all conflicts are resolved",
          "        if git ls-files -u | grep -q .; then",
          "          echo \"Error: Unresolved conflicts still exist\"",
          "          git ls-files -u",
          "          exit 1",
          "        fi",
          "",
          "        echo \"Post-resolution validation completed successfully\"",
          "",
          "    - name: Generate resolution summary",
          "      if: always()",
          "      shell: bash",
          "      run: |",
          "        echo \"=== Syncwright Execution Summary ===\"",
          "        echo \"Validation enabled: ${{ inputs.run_validation }}\"",
          "        echo \"Max tokens: ${{ inputs.max_tokens }}\"",
          "        echo \"Merge failed: ${{ inputs.merge_failed }}\"",
          "        echo \"Conflicts resolved: ${{ steps.run-syncwright.outputs.conflicts_resolved }}\"",
          "        echo \"Files modified: ${{ steps.run-syncwright.outputs.files_modified }}\"",
          "        echo \"==================================\"",
          "",
          "        # Save summary to step summary",
          "        {",
          "          echo \"## Syncwright Execution Summary\"",
          "          echo \"\"",
          "          echo \"| Setting | Value |\"",
          "          echo \"|---------|-------|\"",
          "          echo \"| Validation enabled | ${{ inputs.run_validation }} |\"",
          "          echo \"| Max tokens | ${{ inputs.max_tokens }} |\"",
          "          echo \"| Merge failed | ${{ inputs.merge_failed }} |\"",
          "          echo \"| Conflicts resolved | ${{ steps.run-syncwright.outputs.conflicts_resolved }} |\"",
          "          echo \"| Files modified | ${{ steps.run-syncwright.outputs.files_modified }} |\"",
          "          echo \"\"",
          "          if [ \"${{ steps.run-syncwright.outputs.conflicts_resolved }}\" = \"true\" ]; then",
          "            echo \"✅ **Success**: AI-powered conflict resolution completed\"",
          "          elif [ \"${{ inputs.merge_failed }}\" = \"false\" ]; then",
          "            echo \"✅ **Success**: No conflicts detected, standard operations completed\"",
          "          else",
          "            echo \"❌ **Failed**: Conflict resolution unsuccessful\"",
          "          fi",
          "        } \u003e\u003e $GITHUB_STEP_SUMMARY",
          ""
        ]
      }
    ],
    "total_conflicts": 1,
    "repo_path": "/Users/krysp/Desktop/Claude/Projects/syncwright"
  },
  "conflict_payload": {
    "metadata": {
      "timestamp": "2025-07-27T11:46:58.656118-05:00",
      "repo_path": "/Users/krysp/Desktop/Claude/Projects/syncwright",
      "total_files": 1,
      "total_conflicts": 1,
      "payload_hash": "13b7ededb8de4db7",
      "version": "1.0.0"
    },
    "files": [
      {
        "path": "action.yml",
        "language": "yaml",
        "file_type": "config",
        "conflicts": [
          {
            "id": "action.yml:0",
            "start_line": 29,
            "end_line": 41,
            "ours_lines": [
              "  # Main branch: Add retry mechanism support  ",
              "  retry_count:",
              "    description: 'Number of retry attempts for failed conflict resolutions'",
              "    required: false",
              "    default: '3'"
            ],
            "theirs_lines": [
              "  # Feature branch: Add debug mode support",
              "  debug_mode:",
              "    description: 'Enable detailed debug logging for troubleshooting conflict resolution'",
              "    required: false",
              "    default: 'false'"
            ],
            "pre_context": [
              "    default: 'true'",
              "  max_tokens:",
              "    description: 'Maximum tokens for AI processing (-1 for unlimited, recommended for complex conflicts)'",
              "    required: false",
              "    default: '-1'"
            ],
            "post_context": [
              "  claude_code_o[REDACTED]:",
              "    description: 'Claude Code OAuth token for AI-powered conflict resolution (store as repository [REDACTED])'",
              "    required: false",
              "  merge_failed:",
              "    description: 'Set to true when automatic Git merge fails to trigger AI-powered resolution'"
            ],
            "conflict_type": "modification"
          }
        ],
        "context": {},
        "metadata": {
          "size": 15345,
          "line_count": 381,
          "encoding": "utf-8",
          "line_endings": "lf",
          "has_tests": false,
          "is_generated": false
        }
      }
    ],
    "context": {
      "branch_info": {
        "current_branch": "main",
        "merge_branch": "",
        "merge_base": "28f27f4efd387fc5eebcb9f1288dcf759278bcd4"
      },
      "commit_info": {
        "ours_commit": "36439909f4b666dd251f7f5fbd6ec55c250e0ae4",
        "theirs_commit": "6334c00d77ab7ce29116e9b6a8e2c38a915b2704",
        "base_commit": "28f27f4efd387fc5eebcb9f1288dcf759278bcd4"
      },
      "project_info": {
        "language": "go",
        "build_tool": "make",
        "config_files": [
          "conflict_detection_real.json",
          "payload.json",
          "payload_real.json",
          ".goreleaser.yaml",
          ".golangci.yml",
          ".goreleaser.yml",
          ".yamllint.yml",
          "action.yml",
          "minimal-consumer-workflow.yml",
          ".gitignore"
        ]
      }
    },
    "preferences": {
      "prefer_ours": false,
      "prefer_theirs": false,
      "preserve_both": false,
      "exclude_generated": true,
      "exclude_lockfiles": true,
      "max_context_lines": 5,
      "include_comments": true,
      "include_tests": true,
      "sensitive_patterns": [
        "password",
        "passwd",
        "secret",
        "api_key",
        "apikey",
        "access_token",
        "auth_token",
        "bearer_token",
        "refresh_token",
        "private_key",
        "public_key",
        "certificate",
        "credential",
        "database_url",
        "connection_string",
        "redis_url",
        "mongodb_uri",
        "aws_access_key",
        "aws_secret",
        "gcp_key",
        "azure_key",
        "stripe_key",
        "paypal_key",
        "github_token",
        "gitlab_token",
        "bitbucket_token",
        "docker_password",
        "smtp_password",
        "mail_password",
        "jwt_secret",
        "session_secret",
        "encryption_key",
        "signing_key",
        "webhook_secret",
        "oauth_secret",
        "client_secret",
        "app_secret"
      ]
    }
  },
  "summary": {
    "total_files": 1,
    "total_conflicts": 1,
    "excluded_files": 0,
    "processable_files": 1,
    "repo_path": "/Users/krysp/Desktop/Claude/Projects/syncwright",
    "in_merge_state": true
  }
}